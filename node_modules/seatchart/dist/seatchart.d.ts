/**
 * An object representing the index of a seat.
 */
interface SeatIndex {
    /**
     * Row index of the seat.
     */
    row: number;
    /**
     * Column index of the seat.
     */
    col: number;
}
interface SeatTypeDefault {
    /**
     * Display label of this type.
     */
    label: string;
    /**
     * Price of the seats.
     */
    price: number;
    /**
     * Css class applied to the seats of this type.
     */
    cssClass: string;
}
/**
 * Seat type options.
 */
interface SeatType {
    /**
     * Display label of this type.
     */
    label: string;
    /**
     * Price of the seats.
     */
    price: number;
    /**
     * Css class applied to the seats of this type.
     */
    cssClass: string;
    /**
     * Seats marked with this type.
     */
    seats?: SeatIndex[];
    /**
     * Rows of the seats marked with this type.
     */
    seatRows?: number[];
    /**
     * Columns of the seats marked with this type.
     */
    seatColumns?: number[];
}
/**
 * Options to configure a Seatchart.
 */
interface Options {
    /**
     * Map options.
     */
    map: {
        /**
         * Number of rows.
         */
        rows: number;
        /**
         * Number of columns.
         */
        columns: number;
        /**
         * Seat types options.
         */
        seatTypes: {
            /**
             * All seats that do not fall into a type will be marked as `default`.
             */
            default: SeatTypeDefault;
            [seatTypeKey: string]: SeatType;
        };
        /**
         * Selected seats.
         */
        selectedSeats?: SeatIndex[];
        /**
         * Reserved seats.
         */
        reservedSeats?: SeatIndex[];
        /**
         * Disabled seats.
         */
        disabledSeats?: SeatIndex[];
        /**
         * Position where to place a space between columns. For example index 4 will place a space between columns with index 4 and 5.
         */
        columnSpacers?: number[];
        /**
         * Position where to place a space between rows. For example index 4 will place a space between rows with index 4 and 5.
         */
        rowSpacers?: number[];
        /**
         * Seat label generator.
         */
        seatLabel?: (index: SeatIndex) => string;
        /**
         * Row indexers options.
         */
        indexerRows?: {
            /**
             * Visibility.
             */
            visible?: boolean;
            /**
             * Label generator.
             */
            label?: (row: number) => string;
        };
        /**
         * Column indexers options.
         */
        indexerColumns?: {
            /**
             * Visibility.
             */
            visible?: boolean;
            /**
             * Label generator.
             */
            label?: (column: number) => string;
        };
        /**
         * Sets front header visibility.
         */
        frontVisible?: boolean;
    };
    /**
     * Cart options.
     */
    cart?: {
        /**
         * Cart visibility.
         */
        visible?: boolean;
        /**
         * Displayed currency.
         */
        currency?: string;
        /**
         * Label displayed on the submit button.
         */
        submitLabel?: string;
    };
    /**
     * Legend visibility.
     */
    legendVisible?: boolean;
}
/**
 * A string representing the state of a seat.
 */
type SeatState = "available" | "reserved" | "selected" | "disabled";
/**
 * An object containing information about a seat.
 */
interface SeatInfo {
    /**
     * Seat index.
     */
    index: SeatIndex;
    /**
     * Seat display label.
     */
    label: string;
    /**
     * Seat type.
     */
    type: string;
    /**
     * Seat state.
     */
    state: SeatState;
}
interface SeatChangeEvent {
    /**
     * Seat info prior to the change.
     */
    previous: SeatInfo;
    /**
     * Reference to the current seat info.
     */
    current: SeatInfo;
}
interface CartChangeEvent {
    /**
     * Action type.
     */
    action: "add" | "remove";
    /**
     * Info of the seat regarding the cart change.
     */
    seat: SeatInfo;
}
interface CartClearEvent {
    /**
     * Array of cleared seats.
     */
    seats: Array<SeatInfo>;
}
interface SubmitEvent {
    /**
     * Array containing selected seats.
     */
    cart: SeatInfo[];
    /**
     * Total price of the selected seats.
     */
    total: number;
}
interface Events {
    /**
     * An event emitted when the cart is cleared from all its items.
     */
    cartclear: CartClearEvent;
    /**
     * An event emitted when the cart changes.
     * More specifically when a seat is selected, unselected, removed from the cart or on cart clear.
     */
    cartchange: CartChangeEvent;
    /**
     * An event emitted when a seat changes.
     * More specifically when a seat is selected, unselected, removed from the cart or on cart clear.
     */
    seatchange: SeatChangeEvent;
    /**
     * An event emitted when the submit button is pressed.
     */
    submit: SubmitEvent;
}
declare class Seatchart {
    /**
     * Element passed on creation to contain the Seatchart.
     */
    readonly element: HTMLElement;
    /**
     * Options passed on creation to configure the Seatchart.
     */
    readonly options: Options;
    private ui;
    private store;
    /**
     * Creates a seatchart.
     * @param element - Html element that will contain the Seatchart.
     * @param options - Seatchart options.
     */
    /**
     * Creates a seatchart.
     * @param element - Html element that will contain the Seatchart.
     * @param options - Seatchart options.
     */
    constructor(element: HTMLElement, options: Options);
    /**
     * Adds an event listener.
     * @param type - Event type.
     * @param listener - Listener function called when the given event occurs.
     */
    /**
     * Adds an event listener.
     * @param type - Event type.
     * @param listener - Listener function called when the given event occurs.
     */
    addEventListener<T extends keyof Events>(type: T, listener: (e: Events[T]) => void): void;
    /**
     * Removes an event listener.
     * @param type - Event type.
     * @param listener - Listener to remove.
     */
    /**
     * Removes an event listener.
     * @param type - Event type.
     * @param listener - Listener to remove.
     */
    removeEventListener<T extends keyof Events>(type: T, listener: (e: Events[T]) => void): void;
    /**
     * Gets a reference to the seat info.
     * @param index - Seat index.
     * @returns Seat info.
     */
    /**
     * Gets a reference to the seat info.
     * @param index - Seat index.
     * @returns Seat info.
     */
    getSeat(index: SeatIndex): SeatInfo;
    /**
     * Sets seat info.
     * @param index - Index of the seat to update.
     * @param seat - An object containing the new seat info.
     */
    /**
     * Sets seat info.
     * @param index - Index of the seat to update.
     * @param seat - An object containing the new seat info.
     */
    setSeat(index: SeatIndex, seat: Partial<{
        label: string;
        state: SeatState;
        type: string;
    }>): void;
    /**
     * Gets a reference to the cart array.
     * @returns An array containing selected seats.
     */
    /**
     * Gets a reference to the cart array.
     * @returns An array containing selected seats.
     */
    getCart(): SeatInfo[];
    /**
     * Gets the total price of the selected seats.
     * @returns The total price.
     */
    /**
     * Gets the total price of the selected seats.
     * @returns The total price.
     */
    getCartTotal(): number;
    /**
     * Unselects all seats and removes them from the cart.
     * @returns The total price.
     */
    /**
     * Unselects all seats and removes them from the cart.
     * @returns The total price.
     */
    clearCart(): void;
}
export { Seatchart as default, Events, CartChangeEvent, CartClearEvent, SeatChangeEvent, SubmitEvent, Options, SeatIndex, SeatInfo, SeatState, SeatTypeDefault, SeatType };
